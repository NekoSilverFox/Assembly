#include <iostream>
#include <bitset>

#if 0

  Задания по теме ПОДПРОГРАММЫ :
  1. 算数左/右移 - Напишите фрагмент программы на встроенном ассемблере - сдвига арифметического вправо(влево).
  2. 逻辑左/右移 - Напишите фрагмент программы на встроенном ассемблере. Сдвиг логический вправо(влево).
  3. 循环左/右移 - Напишите фрагмент программы на встроенном ассемблере. Сдвиг циклический вправо(влево).
  4. 双字递增 - Напишите фрагмент программы на ассемблере - инкремент двойного слова. Сравните Ваш способ с тем, как это делает компилятор.
  5. 双字递减 - Напишите фрагмент программы на ассемблере - декремент двойного слова. Посмотрите, как это делает компилятор.
  6. 改变双字符号 - Напишите фрагмент программы на ассемблере - смена знака двойного слова.
  7. 双字加法 - Напишите фрагмент программы на ассемблере - сложение двух двойных слов.
  8. 双字比较 - Напишите фрагмент программы на ассемблере - сравнение двух двойных слов.
  9. 双字乘法 - Напишите фрагмент программы на ассемблере - умножение двух двойных слов.

#endif
void printLine()
{
	std::cout << "\n=========================================================================\n\n";
}
// 1. 算数左/右移 - Напишите фрагмент программы на встроенном ассемблере - сдвига арифметического вправо(влево).
void arithmeticShift()
{
	std::cout << "1. Напишите фрагмент программы на встроенном ассемблере. Сдвиг арифметического вправо(влево)" << std::endl;
	int tmp;
	__asm
	{
		mov eax, 00000000000000000000000000000010B
		mov tmp, eax
	}

	for (int i = 1; i < 5; ++i)
	{
		std::cout << " Число 00000000000000000000000000000010 | сдвига арифметического влево " << i << " bit --> ЧИСЛО = ";
		__asm
		{
			mov eax, tmp
			shl eax, 1
			mov tmp, eax
		}
		std::cout << std::bitset<sizeof(unsigned int) * 8>(tmp) << std::endl;
	}

	std::cout << std::endl;
	__asm
	{
		mov eax, 00000000000000000000000000010000B
		mov tmp, eax
	}

	for (int i = 1; i < 5; ++i)
	{
		std::cout << " Число 00000000000000000000000000010000 | сдвига арифметического вправо " << i << " bit --> ЧИСЛО = ";
		__asm
		{
			mov eax, tmp
			shr eax, 1
			mov tmp, eax
		}
		std::cout << std::bitset<sizeof(unsigned int) * 8>(tmp) << std::endl;
	}
}



// 2. 逻辑左/右移 - Напишите фрагмент программы на встроенном ассемблере. Сдвиг логический вправо(влево).
void logicalShift()
{
	std::cout << "2. Напишите фрагмент программы на встроенном ассемблере. Сдвиг логический вправо(влево)" << std::endl;

	int tmp;
	__asm
	{
		mov eax, 10000000000000000000000000000010B
		mov tmp, eax
	}

	for (int i = 1; i < 5; ++i)
	{
		std::cout << " Число 10000000000000000000000000000010 | сдвига логический влево " << i << " bit --> ЧИСЛО = ";
		__asm
		{
			mov eax, tmp
			sal eax, 1
			mov tmp, eax
		}
		std::cout << std::bitset<sizeof(unsigned int) * 8>(tmp) << std::endl;
	}

	std::cout << std::endl;

	__asm
	{
		mov eax, 10000000000000000000000000010000B
		mov tmp, eax
	}

	for (int i = 1; i < 5; ++i)
	{
		std::cout << " Число 10000000000000000000000000010000 | сдвига логический вправо " << i << " bit --> ЧИСЛО = ";
		__asm
		{
			mov eax, tmp
			sar eax, 1
			mov tmp, eax
		}
		std::cout << std::bitset<sizeof(unsigned int) * 8>(tmp) << std::endl;
	}
}



// 3. 循环左/右移 - Напишите фрагмент программы на встроенном ассемблере. Сдвиг циклический вправо(влево).
void circularShift()
{
	std::cout << "3. Напишите фрагмент программы на встроенном ассемблере. Сдвиг циклический вправо(влево)" << std::endl;

	int tmp;
	__asm
	{
		mov eax, 11000000000000000000000000111110B
		mov tmp, eax
	}

	for (int i = 1; i < 6; ++i)
	{
		std::cout << " Число 11000000000000000000000000111110 | Сдвиг циклический влево " << i << " bit --> ЧИСЛО = ";
		__asm
		{
			mov eax, tmp
			rol eax, 1
			mov tmp, eax
		}
		std::cout << std::bitset<sizeof(unsigned int) * 8>(tmp) << std::endl;
	}

	std::cout << std::endl;
	__asm
	{
		mov eax, 11000000000000000000000000111110B
		mov tmp, eax
	}

	for (int i = 1; i < 6; ++i)
	{
		std::cout << " Число 11000000000000000000000000111110 | Сдвиг циклический вправо " << i << " bit --> ЧИСЛО = ";
		__asm
		{
			mov eax, tmp
			ror eax, 1
			mov tmp, eax
		}
		std::cout << std::bitset<sizeof(unsigned int) * 8>(tmp) << std::endl;
	}
}


int main()
{
	system("chcp 65001 && cls");

	arithmeticShift();
	printLine();

	logicalShift();
	printLine();

	circularShift();
	printLine();
	return 0;
}